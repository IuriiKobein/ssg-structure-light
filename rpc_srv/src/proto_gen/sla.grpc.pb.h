// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sla.proto
#ifndef GRPC_sla_2eproto__INCLUDED
#define GRPC_sla_2eproto__INCLUDED

#include "sla.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sla {

class sla_ctrl final {
 public:
  static constexpr char const* service_full_name() {
    return "sla.sla_ctrl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status _setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::status_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> Async_setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(Async_setupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> PrepareAsync_setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(PrepareAsync_setupRaw(context, request, cq));
    }
    virtual ::grpc::Status _setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::conf_req* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>> Async_setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>>(Async_setup_getRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>> PrepareAsync_setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>>(PrepareAsync_setup_getRaw(context, request, cq));
    }
    virtual ::grpc::Status _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::status_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> Async_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(Async_ref_phase_computeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> PrepareAsync_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(PrepareAsync_ref_phase_computeRaw(context, request, cq));
    }
    virtual ::grpc::Status _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>> Async_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>>(Async_depth_computeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>> PrepareAsync_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>>(PrepareAsync_depth_computeRaw(context, request, cq));
    }
    virtual ::grpc::Status _scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> Async_scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(Async_scan_startRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> PrepareAsync_scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(PrepareAsync_scan_startRaw(context, request, cq));
    }
    virtual ::grpc::Status _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> Async_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(Async_scan_pauseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> PrepareAsync_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(PrepareAsync_scan_pauseRaw(context, request, cq));
    }
    virtual ::grpc::Status _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> Async_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(Async_scan_stopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>> PrepareAsync_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>>(PrepareAsync_scan_stopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      virtual void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* Async_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* PrepareAsync_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>* Async_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::conf_req>* PrepareAsync_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* Async_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* PrepareAsync_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>* Async_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::compute_res>* PrepareAsync_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* Async_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* PrepareAsync_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* Async_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* PrepareAsync_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* Async_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sla::status_res>* PrepareAsync_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status _setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::status_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> Async_setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(Async_setupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> PrepareAsync_setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(PrepareAsync_setupRaw(context, request, cq));
    }
    ::grpc::Status _setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::conf_req* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::conf_req>> Async_setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::conf_req>>(Async_setup_getRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::conf_req>> PrepareAsync_setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::conf_req>>(PrepareAsync_setup_getRaw(context, request, cq));
    }
    ::grpc::Status _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::status_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> Async_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(Async_ref_phase_computeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> PrepareAsync_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(PrepareAsync_ref_phase_computeRaw(context, request, cq));
    }
    ::grpc::Status _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::compute_res>> Async_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::compute_res>>(Async_depth_computeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::compute_res>> PrepareAsync_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::compute_res>>(PrepareAsync_depth_computeRaw(context, request, cq));
    }
    ::grpc::Status _scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> Async_scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(Async_scan_startRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> PrepareAsync_scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(PrepareAsync_scan_startRaw(context, request, cq));
    }
    ::grpc::Status _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> Async_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(Async_scan_pauseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> PrepareAsync_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(PrepareAsync_scan_pauseRaw(context, request, cq));
    }
    ::grpc::Status _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> Async_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(Async_scan_stopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>> PrepareAsync_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sla::status_res>>(PrepareAsync_scan_stopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, std::function<void(::grpc::Status)>) override;
      void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)>) override;
      void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void _scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* Async_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* PrepareAsync_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::conf_req>* Async_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::conf_req>* PrepareAsync_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* Async_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* PrepareAsync_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::compute_res>* Async_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::compute_res>* PrepareAsync_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* Async_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* PrepareAsync_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* Async_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* PrepareAsync_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* Async_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sla::status_res>* PrepareAsync_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod__setup_;
    const ::grpc::internal::RpcMethod rpcmethod__setup_get_;
    const ::grpc::internal::RpcMethod rpcmethod__ref_phase_compute_;
    const ::grpc::internal::RpcMethod rpcmethod__depth_compute_;
    const ::grpc::internal::RpcMethod rpcmethod__scan_start_;
    const ::grpc::internal::RpcMethod rpcmethod__scan_pause_;
    const ::grpc::internal::RpcMethod rpcmethod__scan_stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status _setup(::grpc::ServerContext* context, const ::sla::conf_req* request, ::sla::status_res* response);
    virtual ::grpc::Status _setup_get(::grpc::ServerContext* context, const ::sla::conf_req* request, ::sla::conf_req* response);
    virtual ::grpc::Status _ref_phase_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::status_res* response);
    virtual ::grpc::Status _depth_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::compute_res* response);
    virtual ::grpc::Status _scan_start(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response);
    virtual ::grpc::Status _scan_pause(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response);
    virtual ::grpc::Status _scan_stop(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response);
  };
  template <class BaseClass>
  class WithAsyncMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_setup(::grpc::ServerContext* context, ::sla::conf_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::status_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__setup_get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_setup_get(::grpc::ServerContext* context, ::sla::conf_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::conf_req>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__ref_phase_compute() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_ref_phase_compute(::grpc::ServerContext* context, ::sla::compute_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::status_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__depth_compute() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_depth_compute(::grpc::ServerContext* context, ::sla::compute_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::compute_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__scan_start() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_start(::grpc::ServerContext* context, ::sla::scan_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::status_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__scan_pause() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_pause(::grpc::ServerContext* context, ::sla::scan_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::status_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod__scan_stop() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_stop(::grpc::ServerContext* context, ::sla::scan_req* request, ::grpc::ServerAsyncResponseWriter< ::sla::status_res>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod__setup<WithAsyncMethod__setup_get<WithAsyncMethod__ref_phase_compute<WithAsyncMethod__depth_compute<WithAsyncMethod__scan_start<WithAsyncMethod__scan_pause<WithAsyncMethod__scan_stop<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__setup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::conf_req, ::sla::status_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::conf_req* request, ::sla::status_res* response) { return this->_setup(context, request, response); }));}
    void SetMessageAllocatorFor__setup(
        ::grpc::experimental::MessageAllocator< ::sla::conf_req, ::sla::status_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::conf_req, ::sla::status_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _setup(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _setup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__setup_get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::conf_req, ::sla::conf_req>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::conf_req* request, ::sla::conf_req* response) { return this->_setup_get(context, request, response); }));}
    void SetMessageAllocatorFor__setup_get(
        ::grpc::experimental::MessageAllocator< ::sla::conf_req, ::sla::conf_req>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::conf_req, ::sla::conf_req>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _setup_get(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _setup_get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__ref_phase_compute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::compute_req, ::sla::status_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::compute_req* request, ::sla::status_res* response) { return this->_ref_phase_compute(context, request, response); }));}
    void SetMessageAllocatorFor__ref_phase_compute(
        ::grpc::experimental::MessageAllocator< ::sla::compute_req, ::sla::status_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::compute_req, ::sla::status_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _ref_phase_compute(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _ref_phase_compute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__depth_compute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::compute_req, ::sla::compute_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::compute_req* request, ::sla::compute_res* response) { return this->_depth_compute(context, request, response); }));}
    void SetMessageAllocatorFor__depth_compute(
        ::grpc::experimental::MessageAllocator< ::sla::compute_req, ::sla::compute_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::compute_req, ::sla::compute_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _depth_compute(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _depth_compute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__scan_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::scan_req* request, ::sla::status_res* response) { return this->_scan_start(context, request, response); }));}
    void SetMessageAllocatorFor__scan_start(
        ::grpc::experimental::MessageAllocator< ::sla::scan_req, ::sla::status_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_start(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__scan_pause() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::scan_req* request, ::sla::status_res* response) { return this->_scan_pause(context, request, response); }));}
    void SetMessageAllocatorFor__scan_pause(
        ::grpc::experimental::MessageAllocator< ::sla::scan_req, ::sla::status_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_pause(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_pause(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod__scan_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sla::scan_req* request, ::sla::status_res* response) { return this->_scan_stop(context, request, response); }));}
    void SetMessageAllocatorFor__scan_stop(
        ::grpc::experimental::MessageAllocator< ::sla::scan_req, ::sla::status_res>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sla::scan_req, ::sla::status_res>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_stop(
      ::grpc::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod__setup<ExperimentalWithCallbackMethod__setup_get<ExperimentalWithCallbackMethod__ref_phase_compute<ExperimentalWithCallbackMethod__depth_compute<ExperimentalWithCallbackMethod__scan_start<ExperimentalWithCallbackMethod__scan_pause<ExperimentalWithCallbackMethod__scan_stop<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod__setup<ExperimentalWithCallbackMethod__setup_get<ExperimentalWithCallbackMethod__ref_phase_compute<ExperimentalWithCallbackMethod__depth_compute<ExperimentalWithCallbackMethod__scan_start<ExperimentalWithCallbackMethod__scan_pause<ExperimentalWithCallbackMethod__scan_stop<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__setup_get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__ref_phase_compute() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__depth_compute() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__scan_start() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__scan_pause() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod__scan_stop() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__setup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_setup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__setup_get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_setup_get(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__ref_phase_compute() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_ref_phase_compute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__depth_compute() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_depth_compute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__scan_start() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_start(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__scan_pause() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_pause(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod__scan_stop() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request_scan_stop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__setup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_setup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _setup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _setup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__setup_get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_setup_get(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _setup_get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _setup_get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__ref_phase_compute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_ref_phase_compute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _ref_phase_compute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _ref_phase_compute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__depth_compute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_depth_compute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _depth_compute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _depth_compute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__scan_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_scan_start(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__scan_pause() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_scan_pause(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_pause(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_pause(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod__scan_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->_scan_stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* _scan_stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* _scan_stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__setup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::conf_req, ::sla::status_res>(std::bind(&WithStreamedUnaryMethod__setup<BaseClass>::Streamed_setup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _setup(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_setup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::conf_req,::sla::status_res>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__setup_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__setup_get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::conf_req, ::sla::conf_req>(std::bind(&WithStreamedUnaryMethod__setup_get<BaseClass>::Streamed_setup_get, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__setup_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _setup_get(::grpc::ServerContext* /*context*/, const ::sla::conf_req* /*request*/, ::sla::conf_req* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_setup_get(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::conf_req,::sla::conf_req>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__ref_phase_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__ref_phase_compute() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::compute_req, ::sla::status_res>(std::bind(&WithStreamedUnaryMethod__ref_phase_compute<BaseClass>::Streamed_ref_phase_compute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__ref_phase_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _ref_phase_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_ref_phase_compute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::compute_req,::sla::status_res>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__depth_compute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__depth_compute() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::compute_req, ::sla::compute_res>(std::bind(&WithStreamedUnaryMethod__depth_compute<BaseClass>::Streamed_depth_compute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__depth_compute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _depth_compute(::grpc::ServerContext* /*context*/, const ::sla::compute_req* /*request*/, ::sla::compute_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_depth_compute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::compute_req,::sla::compute_res>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__scan_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__scan_start() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::scan_req, ::sla::status_res>(std::bind(&WithStreamedUnaryMethod__scan_start<BaseClass>::Streamed_scan_start, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__scan_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _scan_start(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_scan_start(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::scan_req,::sla::status_res>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__scan_pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__scan_pause() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::scan_req, ::sla::status_res>(std::bind(&WithStreamedUnaryMethod__scan_pause<BaseClass>::Streamed_scan_pause, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__scan_pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _scan_pause(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_scan_pause(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::scan_req,::sla::status_res>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod__scan_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod__scan_stop() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::sla::scan_req, ::sla::status_res>(std::bind(&WithStreamedUnaryMethod__scan_stop<BaseClass>::Streamed_scan_stop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod__scan_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status _scan_stop(::grpc::ServerContext* /*context*/, const ::sla::scan_req* /*request*/, ::sla::status_res* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed_scan_stop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sla::scan_req,::sla::status_res>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod__setup<WithStreamedUnaryMethod__setup_get<WithStreamedUnaryMethod__ref_phase_compute<WithStreamedUnaryMethod__depth_compute<WithStreamedUnaryMethod__scan_start<WithStreamedUnaryMethod__scan_pause<WithStreamedUnaryMethod__scan_stop<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod__setup<WithStreamedUnaryMethod__setup_get<WithStreamedUnaryMethod__ref_phase_compute<WithStreamedUnaryMethod__depth_compute<WithStreamedUnaryMethod__scan_start<WithStreamedUnaryMethod__scan_pause<WithStreamedUnaryMethod__scan_stop<Service > > > > > > > StreamedService;
};

}  // namespace sla


#endif  // GRPC_sla_2eproto__INCLUDED
