// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sla_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sla_2eproto;
namespace sla {
class compute_req;
class compute_reqDefaultTypeInternal;
extern compute_reqDefaultTypeInternal _compute_req_default_instance_;
class compute_res;
class compute_resDefaultTypeInternal;
extern compute_resDefaultTypeInternal _compute_res_default_instance_;
class conf_req;
class conf_reqDefaultTypeInternal;
extern conf_reqDefaultTypeInternal _conf_req_default_instance_;
class scan_req;
class scan_reqDefaultTypeInternal;
extern scan_reqDefaultTypeInternal _scan_req_default_instance_;
class status_res;
class status_resDefaultTypeInternal;
extern status_resDefaultTypeInternal _status_res_default_instance_;
}  // namespace sla
PROTOBUF_NAMESPACE_OPEN
template<> ::sla::compute_req* Arena::CreateMaybeMessage<::sla::compute_req>(Arena*);
template<> ::sla::compute_res* Arena::CreateMaybeMessage<::sla::compute_res>(Arena*);
template<> ::sla::conf_req* Arena::CreateMaybeMessage<::sla::conf_req>(Arena*);
template<> ::sla::scan_req* Arena::CreateMaybeMessage<::sla::scan_req>(Arena*);
template<> ::sla::status_res* Arena::CreateMaybeMessage<::sla::status_res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sla {

// ===================================================================

class conf_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.conf_req) */ {
 public:
  conf_req();
  virtual ~conf_req();

  conf_req(const conf_req& from);
  conf_req(conf_req&& from) noexcept
    : conf_req() {
    *this = ::std::move(from);
  }

  inline conf_req& operator=(const conf_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline conf_req& operator=(conf_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const conf_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const conf_req* internal_default_instance() {
    return reinterpret_cast<const conf_req*>(
               &_conf_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(conf_req& a, conf_req& b) {
    a.Swap(&b);
  }
  inline void Swap(conf_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline conf_req* New() const final {
    return CreateMaybeMessage<conf_req>(nullptr);
  }

  conf_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<conf_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const conf_req& from);
  void MergeFrom(const conf_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(conf_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.conf_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFreqRatioFieldNumber = 4,
    kRealScaleFieldNumber = 5,
    kNumOfPeriodsFieldNumber = 6,
    kUseMarkersFieldNumber = 7,
    kIsHorizontalFieldNumber = 8,
    kNumOfPatternsFieldNumber = 9,
    kNumOfPixMarkFieldNumber = 10,
    kOpencvMethodIdFieldNumber = 11,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float freq_ratio = 4;
  void clear_freq_ratio();
  float freq_ratio() const;
  void set_freq_ratio(float value);
  private:
  float _internal_freq_ratio() const;
  void _internal_set_freq_ratio(float value);
  public:

  // float real_scale = 5;
  void clear_real_scale();
  float real_scale() const;
  void set_real_scale(float value);
  private:
  float _internal_real_scale() const;
  void _internal_set_real_scale(float value);
  public:

  // int32 num_of_periods = 6;
  void clear_num_of_periods();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_periods() const;
  void set_num_of_periods(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_periods() const;
  void _internal_set_num_of_periods(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 use_markers = 7;
  void clear_use_markers();
  ::PROTOBUF_NAMESPACE_ID::int32 use_markers() const;
  void set_use_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_markers() const;
  void _internal_set_use_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_horizontal = 8;
  void clear_is_horizontal();
  ::PROTOBUF_NAMESPACE_ID::int32 is_horizontal() const;
  void set_is_horizontal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_horizontal() const;
  void _internal_set_is_horizontal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_of_patterns = 9;
  void clear_num_of_patterns();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_patterns() const;
  void set_num_of_patterns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_patterns() const;
  void _internal_set_num_of_patterns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_of_pix_mark = 10;
  void clear_num_of_pix_mark();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_pix_mark() const;
  void set_num_of_pix_mark(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_pix_mark() const;
  void _internal_set_num_of_pix_mark(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 opencv_method_id = 11;
  void clear_opencv_method_id();
  ::PROTOBUF_NAMESPACE_ID::int32 opencv_method_id() const;
  void set_opencv_method_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opencv_method_id() const;
  void _internal_set_opencv_method_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.conf_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float freq_ratio_;
  float real_scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_periods_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_markers_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_horizontal_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_patterns_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_pix_mark_;
  ::PROTOBUF_NAMESPACE_ID::int32 opencv_method_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class scan_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.scan_req) */ {
 public:
  scan_req();
  virtual ~scan_req();

  scan_req(const scan_req& from);
  scan_req(scan_req&& from) noexcept
    : scan_req() {
    *this = ::std::move(from);
  }

  inline scan_req& operator=(const scan_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline scan_req& operator=(scan_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scan_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scan_req* internal_default_instance() {
    return reinterpret_cast<const scan_req*>(
               &_scan_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(scan_req& a, scan_req& b) {
    a.Swap(&b);
  }
  inline void Swap(scan_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scan_req* New() const final {
    return CreateMaybeMessage<scan_req>(nullptr);
  }

  scan_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scan_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scan_req& from);
  void MergeFrom(const scan_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scan_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.scan_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kRotationAngleFieldNumber = 2,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // int32 rotation_angle = 2;
  void clear_rotation_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_angle() const;
  void set_rotation_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotation_angle() const;
  void _internal_set_rotation_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.scan_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class status_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.status_res) */ {
 public:
  status_res();
  virtual ~status_res();

  status_res(const status_res& from);
  status_res(status_res&& from) noexcept
    : status_res() {
    *this = ::std::move(from);
  }

  inline status_res& operator=(const status_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline status_res& operator=(status_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const status_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const status_res* internal_default_instance() {
    return reinterpret_cast<const status_res*>(
               &_status_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(status_res& a, status_res& b) {
    a.Swap(&b);
  }
  inline void Swap(status_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline status_res* New() const final {
    return CreateMaybeMessage<status_res>(nullptr);
  }

  status_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<status_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const status_res& from);
  void MergeFrom(const status_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(status_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.status_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.status_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class compute_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.compute_req) */ {
 public:
  compute_req();
  virtual ~compute_req();

  compute_req(const compute_req& from);
  compute_req(compute_req&& from) noexcept
    : compute_req() {
    *this = ::std::move(from);
  }

  inline compute_req& operator=(const compute_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline compute_req& operator=(compute_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const compute_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const compute_req* internal_default_instance() {
    return reinterpret_cast<const compute_req*>(
               &_compute_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(compute_req& a, compute_req& b) {
    a.Swap(&b);
  }
  inline void Swap(compute_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline compute_req* New() const final {
    return CreateMaybeMessage<compute_req>(nullptr);
  }

  compute_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<compute_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const compute_req& from);
  void MergeFrom(const compute_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(compute_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.compute_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLfImgFieldNumber = 2,
    kHfImgFieldNumber = 3,
    kMethodFieldNumber = 1,
  };
  // repeated string lf_img = 2;
  int lf_img_size() const;
  private:
  int _internal_lf_img_size() const;
  public:
  void clear_lf_img();
  const std::string& lf_img(int index) const;
  std::string* mutable_lf_img(int index);
  void set_lf_img(int index, const std::string& value);
  void set_lf_img(int index, std::string&& value);
  void set_lf_img(int index, const char* value);
  void set_lf_img(int index, const char* value, size_t size);
  std::string* add_lf_img();
  void add_lf_img(const std::string& value);
  void add_lf_img(std::string&& value);
  void add_lf_img(const char* value);
  void add_lf_img(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lf_img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lf_img();
  private:
  const std::string& _internal_lf_img(int index) const;
  std::string* _internal_add_lf_img();
  public:

  // repeated string hf_img = 3;
  int hf_img_size() const;
  private:
  int _internal_hf_img_size() const;
  public:
  void clear_hf_img();
  const std::string& hf_img(int index) const;
  std::string* mutable_hf_img(int index);
  void set_hf_img(int index, const std::string& value);
  void set_hf_img(int index, std::string&& value);
  void set_hf_img(int index, const char* value);
  void set_hf_img(int index, const char* value, size_t size);
  std::string* add_hf_img();
  void add_hf_img(const std::string& value);
  void add_hf_img(std::string&& value);
  void add_hf_img(const char* value);
  void add_hf_img(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hf_img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hf_img();
  private:
  const std::string& _internal_hf_img(int index) const;
  std::string* _internal_add_hf_img();
  public:

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:sla.compute_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lf_img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hf_img_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class compute_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.compute_res) */ {
 public:
  compute_res();
  virtual ~compute_res();

  compute_res(const compute_res& from);
  compute_res(compute_res&& from) noexcept
    : compute_res() {
    *this = ::std::move(from);
  }

  inline compute_res& operator=(const compute_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline compute_res& operator=(compute_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const compute_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const compute_res* internal_default_instance() {
    return reinterpret_cast<const compute_res*>(
               &_compute_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(compute_res& a, compute_res& b) {
    a.Swap(&b);
  }
  inline void Swap(compute_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline compute_res* New() const final {
    return CreateMaybeMessage<compute_res>(nullptr);
  }

  compute_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<compute_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const compute_res& from);
  void MergeFrom(const compute_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(compute_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.compute_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kUrlImgFieldNumber = 2,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string url_img = 2;
  void clear_url_img();
  const std::string& url_img() const;
  void set_url_img(const std::string& value);
  void set_url_img(std::string&& value);
  void set_url_img(const char* value);
  void set_url_img(const char* value, size_t size);
  std::string* mutable_url_img();
  std::string* release_url_img();
  void set_allocated_url_img(std::string* url_img);
  private:
  const std::string& _internal_url_img() const;
  void _internal_set_url_img(const std::string& value);
  std::string* _internal_mutable_url_img();
  public:

  // @@protoc_insertion_point(class_scope:sla.compute_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// conf_req

// string method = 1;
inline void conf_req::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& conf_req::method() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.method)
  return _internal_method();
}
inline void conf_req::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.method)
}
inline std::string* conf_req::mutable_method() {
  // @@protoc_insertion_point(field_mutable:sla.conf_req.method)
  return _internal_mutable_method();
}
inline const std::string& conf_req::_internal_method() const {
  return method_.GetNoArena();
}
inline void conf_req::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void conf_req::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.conf_req.method)
}
inline void conf_req::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.conf_req.method)
}
inline void conf_req::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.conf_req.method)
}
inline std::string* conf_req::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* conf_req::release_method() {
  // @@protoc_insertion_point(field_release:sla.conf_req.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void conf_req::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:sla.conf_req.method)
}

// int32 width = 2;
inline void conf_req::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::width() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.width)
  return _internal_width();
}
inline void conf_req::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void conf_req::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.width)
}

// int32 height = 3;
inline void conf_req::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::height() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.height)
  return _internal_height();
}
inline void conf_req::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void conf_req::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.height)
}

// float freq_ratio = 4;
inline void conf_req::clear_freq_ratio() {
  freq_ratio_ = 0;
}
inline float conf_req::_internal_freq_ratio() const {
  return freq_ratio_;
}
inline float conf_req::freq_ratio() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.freq_ratio)
  return _internal_freq_ratio();
}
inline void conf_req::_internal_set_freq_ratio(float value) {
  
  freq_ratio_ = value;
}
inline void conf_req::set_freq_ratio(float value) {
  _internal_set_freq_ratio(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.freq_ratio)
}

// float real_scale = 5;
inline void conf_req::clear_real_scale() {
  real_scale_ = 0;
}
inline float conf_req::_internal_real_scale() const {
  return real_scale_;
}
inline float conf_req::real_scale() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.real_scale)
  return _internal_real_scale();
}
inline void conf_req::_internal_set_real_scale(float value) {
  
  real_scale_ = value;
}
inline void conf_req::set_real_scale(float value) {
  _internal_set_real_scale(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.real_scale)
}

// int32 num_of_periods = 6;
inline void conf_req::clear_num_of_periods() {
  num_of_periods_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_num_of_periods() const {
  return num_of_periods_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::num_of_periods() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.num_of_periods)
  return _internal_num_of_periods();
}
inline void conf_req::_internal_set_num_of_periods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_periods_ = value;
}
inline void conf_req::set_num_of_periods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_periods(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.num_of_periods)
}

// int32 use_markers = 7;
inline void conf_req::clear_use_markers() {
  use_markers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_use_markers() const {
  return use_markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::use_markers() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.use_markers)
  return _internal_use_markers();
}
inline void conf_req::_internal_set_use_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_markers_ = value;
}
inline void conf_req::set_use_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_markers(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.use_markers)
}

// int32 is_horizontal = 8;
inline void conf_req::clear_is_horizontal() {
  is_horizontal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_is_horizontal() const {
  return is_horizontal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::is_horizontal() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.is_horizontal)
  return _internal_is_horizontal();
}
inline void conf_req::_internal_set_is_horizontal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_horizontal_ = value;
}
inline void conf_req::set_is_horizontal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_horizontal(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.is_horizontal)
}

// int32 num_of_patterns = 9;
inline void conf_req::clear_num_of_patterns() {
  num_of_patterns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_num_of_patterns() const {
  return num_of_patterns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::num_of_patterns() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.num_of_patterns)
  return _internal_num_of_patterns();
}
inline void conf_req::_internal_set_num_of_patterns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_patterns_ = value;
}
inline void conf_req::set_num_of_patterns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_patterns(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.num_of_patterns)
}

// int32 num_of_pix_mark = 10;
inline void conf_req::clear_num_of_pix_mark() {
  num_of_pix_mark_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_num_of_pix_mark() const {
  return num_of_pix_mark_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::num_of_pix_mark() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.num_of_pix_mark)
  return _internal_num_of_pix_mark();
}
inline void conf_req::_internal_set_num_of_pix_mark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_pix_mark_ = value;
}
inline void conf_req::set_num_of_pix_mark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_pix_mark(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.num_of_pix_mark)
}

// int32 opencv_method_id = 11;
inline void conf_req::clear_opencv_method_id() {
  opencv_method_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::_internal_opencv_method_id() const {
  return opencv_method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 conf_req::opencv_method_id() const {
  // @@protoc_insertion_point(field_get:sla.conf_req.opencv_method_id)
  return _internal_opencv_method_id();
}
inline void conf_req::_internal_set_opencv_method_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opencv_method_id_ = value;
}
inline void conf_req::set_opencv_method_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opencv_method_id(value);
  // @@protoc_insertion_point(field_set:sla.conf_req.opencv_method_id)
}

// -------------------------------------------------------------------

// scan_req

// string method = 1;
inline void scan_req::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& scan_req::method() const {
  // @@protoc_insertion_point(field_get:sla.scan_req.method)
  return _internal_method();
}
inline void scan_req::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:sla.scan_req.method)
}
inline std::string* scan_req::mutable_method() {
  // @@protoc_insertion_point(field_mutable:sla.scan_req.method)
  return _internal_mutable_method();
}
inline const std::string& scan_req::_internal_method() const {
  return method_.GetNoArena();
}
inline void scan_req::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void scan_req::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.scan_req.method)
}
inline void scan_req::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.scan_req.method)
}
inline void scan_req::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.scan_req.method)
}
inline std::string* scan_req::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* scan_req::release_method() {
  // @@protoc_insertion_point(field_release:sla.scan_req.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void scan_req::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:sla.scan_req.method)
}

// int32 rotation_angle = 2;
inline void scan_req::clear_rotation_angle() {
  rotation_angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scan_req::_internal_rotation_angle() const {
  return rotation_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scan_req::rotation_angle() const {
  // @@protoc_insertion_point(field_get:sla.scan_req.rotation_angle)
  return _internal_rotation_angle();
}
inline void scan_req::_internal_set_rotation_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rotation_angle_ = value;
}
inline void scan_req::set_rotation_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotation_angle(value);
  // @@protoc_insertion_point(field_set:sla.scan_req.rotation_angle)
}

// -------------------------------------------------------------------

// status_res

// int32 status = 1;
inline void status_res::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 status_res::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 status_res::status() const {
  // @@protoc_insertion_point(field_get:sla.status_res.status)
  return _internal_status();
}
inline void status_res::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void status_res::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sla.status_res.status)
}

// -------------------------------------------------------------------

// compute_req

// string method = 1;
inline void compute_req::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& compute_req::method() const {
  // @@protoc_insertion_point(field_get:sla.compute_req.method)
  return _internal_method();
}
inline void compute_req::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:sla.compute_req.method)
}
inline std::string* compute_req::mutable_method() {
  // @@protoc_insertion_point(field_mutable:sla.compute_req.method)
  return _internal_mutable_method();
}
inline const std::string& compute_req::_internal_method() const {
  return method_.GetNoArena();
}
inline void compute_req::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void compute_req::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.compute_req.method)
}
inline void compute_req::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.compute_req.method)
}
inline void compute_req::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.compute_req.method)
}
inline std::string* compute_req::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* compute_req::release_method() {
  // @@protoc_insertion_point(field_release:sla.compute_req.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void compute_req::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:sla.compute_req.method)
}

// repeated string lf_img = 2;
inline int compute_req::_internal_lf_img_size() const {
  return lf_img_.size();
}
inline int compute_req::lf_img_size() const {
  return _internal_lf_img_size();
}
inline void compute_req::clear_lf_img() {
  lf_img_.Clear();
}
inline std::string* compute_req::add_lf_img() {
  // @@protoc_insertion_point(field_add_mutable:sla.compute_req.lf_img)
  return _internal_add_lf_img();
}
inline const std::string& compute_req::_internal_lf_img(int index) const {
  return lf_img_.Get(index);
}
inline const std::string& compute_req::lf_img(int index) const {
  // @@protoc_insertion_point(field_get:sla.compute_req.lf_img)
  return _internal_lf_img(index);
}
inline std::string* compute_req::mutable_lf_img(int index) {
  // @@protoc_insertion_point(field_mutable:sla.compute_req.lf_img)
  return lf_img_.Mutable(index);
}
inline void compute_req::set_lf_img(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sla.compute_req.lf_img)
  lf_img_.Mutable(index)->assign(value);
}
inline void compute_req::set_lf_img(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sla.compute_req.lf_img)
  lf_img_.Mutable(index)->assign(std::move(value));
}
inline void compute_req::set_lf_img(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lf_img_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sla.compute_req.lf_img)
}
inline void compute_req::set_lf_img(int index, const char* value, size_t size) {
  lf_img_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sla.compute_req.lf_img)
}
inline std::string* compute_req::_internal_add_lf_img() {
  return lf_img_.Add();
}
inline void compute_req::add_lf_img(const std::string& value) {
  lf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sla.compute_req.lf_img)
}
inline void compute_req::add_lf_img(std::string&& value) {
  lf_img_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sla.compute_req.lf_img)
}
inline void compute_req::add_lf_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sla.compute_req.lf_img)
}
inline void compute_req::add_lf_img(const char* value, size_t size) {
  lf_img_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sla.compute_req.lf_img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
compute_req::lf_img() const {
  // @@protoc_insertion_point(field_list:sla.compute_req.lf_img)
  return lf_img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
compute_req::mutable_lf_img() {
  // @@protoc_insertion_point(field_mutable_list:sla.compute_req.lf_img)
  return &lf_img_;
}

// repeated string hf_img = 3;
inline int compute_req::_internal_hf_img_size() const {
  return hf_img_.size();
}
inline int compute_req::hf_img_size() const {
  return _internal_hf_img_size();
}
inline void compute_req::clear_hf_img() {
  hf_img_.Clear();
}
inline std::string* compute_req::add_hf_img() {
  // @@protoc_insertion_point(field_add_mutable:sla.compute_req.hf_img)
  return _internal_add_hf_img();
}
inline const std::string& compute_req::_internal_hf_img(int index) const {
  return hf_img_.Get(index);
}
inline const std::string& compute_req::hf_img(int index) const {
  // @@protoc_insertion_point(field_get:sla.compute_req.hf_img)
  return _internal_hf_img(index);
}
inline std::string* compute_req::mutable_hf_img(int index) {
  // @@protoc_insertion_point(field_mutable:sla.compute_req.hf_img)
  return hf_img_.Mutable(index);
}
inline void compute_req::set_hf_img(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sla.compute_req.hf_img)
  hf_img_.Mutable(index)->assign(value);
}
inline void compute_req::set_hf_img(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sla.compute_req.hf_img)
  hf_img_.Mutable(index)->assign(std::move(value));
}
inline void compute_req::set_hf_img(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hf_img_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sla.compute_req.hf_img)
}
inline void compute_req::set_hf_img(int index, const char* value, size_t size) {
  hf_img_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sla.compute_req.hf_img)
}
inline std::string* compute_req::_internal_add_hf_img() {
  return hf_img_.Add();
}
inline void compute_req::add_hf_img(const std::string& value) {
  hf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sla.compute_req.hf_img)
}
inline void compute_req::add_hf_img(std::string&& value) {
  hf_img_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sla.compute_req.hf_img)
}
inline void compute_req::add_hf_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sla.compute_req.hf_img)
}
inline void compute_req::add_hf_img(const char* value, size_t size) {
  hf_img_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sla.compute_req.hf_img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
compute_req::hf_img() const {
  // @@protoc_insertion_point(field_list:sla.compute_req.hf_img)
  return hf_img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
compute_req::mutable_hf_img() {
  // @@protoc_insertion_point(field_mutable_list:sla.compute_req.hf_img)
  return &hf_img_;
}

// -------------------------------------------------------------------

// compute_res

// string method = 1;
inline void compute_res::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& compute_res::method() const {
  // @@protoc_insertion_point(field_get:sla.compute_res.method)
  return _internal_method();
}
inline void compute_res::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:sla.compute_res.method)
}
inline std::string* compute_res::mutable_method() {
  // @@protoc_insertion_point(field_mutable:sla.compute_res.method)
  return _internal_mutable_method();
}
inline const std::string& compute_res::_internal_method() const {
  return method_.GetNoArena();
}
inline void compute_res::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void compute_res::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.compute_res.method)
}
inline void compute_res::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.compute_res.method)
}
inline void compute_res::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.compute_res.method)
}
inline std::string* compute_res::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* compute_res::release_method() {
  // @@protoc_insertion_point(field_release:sla.compute_res.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void compute_res::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:sla.compute_res.method)
}

// string url_img = 2;
inline void compute_res::clear_url_img() {
  url_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& compute_res::url_img() const {
  // @@protoc_insertion_point(field_get:sla.compute_res.url_img)
  return _internal_url_img();
}
inline void compute_res::set_url_img(const std::string& value) {
  _internal_set_url_img(value);
  // @@protoc_insertion_point(field_set:sla.compute_res.url_img)
}
inline std::string* compute_res::mutable_url_img() {
  // @@protoc_insertion_point(field_mutable:sla.compute_res.url_img)
  return _internal_mutable_url_img();
}
inline const std::string& compute_res::_internal_url_img() const {
  return url_img_.GetNoArena();
}
inline void compute_res::_internal_set_url_img(const std::string& value) {
  
  url_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void compute_res::set_url_img(std::string&& value) {
  
  url_img_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.compute_res.url_img)
}
inline void compute_res::set_url_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.compute_res.url_img)
}
inline void compute_res::set_url_img(const char* value, size_t size) {
  
  url_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.compute_res.url_img)
}
inline std::string* compute_res::_internal_mutable_url_img() {
  
  return url_img_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* compute_res::release_url_img() {
  // @@protoc_insertion_point(field_release:sla.compute_res.url_img)
  
  return url_img_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void compute_res::set_allocated_url_img(std::string* url_img) {
  if (url_img != nullptr) {
    
  } else {
    
  }
  url_img_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_img);
  // @@protoc_insertion_point(field_set_allocated:sla.compute_res.url_img)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
