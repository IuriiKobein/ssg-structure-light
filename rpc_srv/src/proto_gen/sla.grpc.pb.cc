// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sla.proto

#include "sla.pb.h"
#include "sla.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sla {

static const char* sla_ctrl_method_names[] = {
  "/sla.sla_ctrl/_setup",
  "/sla.sla_ctrl/_setup_get",
  "/sla.sla_ctrl/_ref_phase_compute",
  "/sla.sla_ctrl/_depth_compute",
  "/sla.sla_ctrl/_ref_phase_capture_and_compute",
  "/sla.sla_ctrl/_depth_capture_and_compute",
  "/sla.sla_ctrl/_scan_start",
  "/sla.sla_ctrl/_scan_pause",
  "/sla.sla_ctrl/_scan_stop",
};

std::unique_ptr< sla_ctrl::Stub> sla_ctrl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< sla_ctrl::Stub> stub(new sla_ctrl::Stub(channel));
  return stub;
}

sla_ctrl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod__setup_(sla_ctrl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__setup_get_(sla_ctrl_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__ref_phase_compute_(sla_ctrl_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__depth_compute_(sla_ctrl_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__ref_phase_capture_and_compute_(sla_ctrl_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__depth_capture_and_compute_(sla_ctrl_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__scan_start_(sla_ctrl_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__scan_pause_(sla_ctrl_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__scan_stop_(sla_ctrl_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status sla_ctrl::Stub::_setup(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::status_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__setup_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__setup_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__setup_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_setup(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__setup_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_setup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::Async_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::PrepareAsync_setupRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__setup_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_setup_get(::grpc::ClientContext* context, const ::sla::conf_req& request, ::sla::conf_req* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__setup_get_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__setup_get_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__setup_get_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_setup_get(::grpc::ClientContext* context, const ::sla::conf_req* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__setup_get_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_setup_get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::conf_req* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__setup_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::conf_req>* sla_ctrl::Stub::Async_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::conf_req>::Create(channel_.get(), cq, rpcmethod__setup_get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::conf_req>* sla_ctrl::Stub::PrepareAsync_setup_getRaw(::grpc::ClientContext* context, const ::sla::conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::conf_req>::Create(channel_.get(), cq, rpcmethod__setup_get_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__ref_phase_compute_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__ref_phase_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__ref_phase_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_ref_phase_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__ref_phase_compute_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_ref_phase_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__ref_phase_compute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::Async_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__ref_phase_compute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::PrepareAsync_ref_phase_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__ref_phase_compute_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__depth_compute_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__depth_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__depth_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_depth_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__depth_compute_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_depth_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__depth_compute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::Async_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__depth_compute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::PrepareAsync_depth_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__depth_compute_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_ref_phase_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__ref_phase_capture_and_compute_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_ref_phase_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__ref_phase_capture_and_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_ref_phase_capture_and_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__ref_phase_capture_and_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_ref_phase_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__ref_phase_capture_and_compute_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_ref_phase_capture_and_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__ref_phase_capture_and_compute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::Async_ref_phase_capture_and_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__ref_phase_capture_and_compute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::PrepareAsync_ref_phase_capture_and_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__ref_phase_capture_and_compute_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_depth_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req& request, ::sla::compute_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__depth_capture_and_compute_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_depth_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__depth_capture_and_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_depth_capture_and_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__depth_capture_and_compute_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_depth_capture_and_compute(::grpc::ClientContext* context, const ::sla::compute_req* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__depth_capture_and_compute_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_depth_capture_and_compute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::compute_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__depth_capture_and_compute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::Async_depth_capture_and_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__depth_capture_and_compute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::compute_res>* sla_ctrl::Stub::PrepareAsync_depth_capture_and_computeRaw(::grpc::ClientContext* context, const ::sla::compute_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::compute_res>::Create(channel_.get(), cq, rpcmethod__depth_capture_and_compute_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_scan_start(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__scan_start_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_start_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_start_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_start(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_start_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_scan_start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::Async_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::PrepareAsync_scan_startRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_start_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__scan_pause_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_pause_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_pause_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_pause(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_pause_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_scan_pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::Async_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_pause_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::PrepareAsync_scan_pauseRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_pause_, context, request, false);
}

::grpc::Status sla_ctrl::Stub::_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req& request, ::sla::status_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__scan_stop_, context, request, response);
}

void sla_ctrl::Stub::experimental_async::_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_stop_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__scan_stop_, context, request, response, std::move(f));
}

void sla_ctrl::Stub::experimental_async::_scan_stop(::grpc::ClientContext* context, const ::sla::scan_req* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_stop_, context, request, response, reactor);
}

void sla_ctrl::Stub::experimental_async::_scan_stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::status_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__scan_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::Async_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::status_res>* sla_ctrl::Stub::PrepareAsync_scan_stopRaw(::grpc::ClientContext* context, const ::sla::scan_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::status_res>::Create(channel_.get(), cq, rpcmethod__scan_stop_, context, request, false);
}

sla_ctrl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::conf_req, ::sla::status_res>(
          std::mem_fn(&sla_ctrl::Service::_setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::conf_req, ::sla::conf_req>(
          std::mem_fn(&sla_ctrl::Service::_setup_get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::compute_req, ::sla::compute_res>(
          std::mem_fn(&sla_ctrl::Service::_ref_phase_compute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::compute_req, ::sla::compute_res>(
          std::mem_fn(&sla_ctrl::Service::_depth_compute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::compute_req, ::sla::compute_res>(
          std::mem_fn(&sla_ctrl::Service::_ref_phase_capture_and_compute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::compute_req, ::sla::compute_res>(
          std::mem_fn(&sla_ctrl::Service::_depth_capture_and_compute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::scan_req, ::sla::status_res>(
          std::mem_fn(&sla_ctrl::Service::_scan_start), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::scan_req, ::sla::status_res>(
          std::mem_fn(&sla_ctrl::Service::_scan_pause), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sla_ctrl_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sla_ctrl::Service, ::sla::scan_req, ::sla::status_res>(
          std::mem_fn(&sla_ctrl::Service::_scan_stop), this)));
}

sla_ctrl::Service::~Service() {
}

::grpc::Status sla_ctrl::Service::_setup(::grpc::ServerContext* context, const ::sla::conf_req* request, ::sla::status_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_setup_get(::grpc::ServerContext* context, const ::sla::conf_req* request, ::sla::conf_req* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_ref_phase_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::compute_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_depth_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::compute_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_ref_phase_capture_and_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::compute_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_depth_capture_and_compute(::grpc::ServerContext* context, const ::sla::compute_req* request, ::sla::compute_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_scan_start(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_scan_pause(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sla_ctrl::Service::_scan_stop(::grpc::ServerContext* context, const ::sla::scan_req* request, ::sla::status_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sla

