// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sla_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sla_2eproto;
namespace sla {
class tpu_calc_req;
class tpu_calc_reqDefaultTypeInternal;
extern tpu_calc_reqDefaultTypeInternal _tpu_calc_req_default_instance_;
class tpu_calc_res;
class tpu_calc_resDefaultTypeInternal;
extern tpu_calc_resDefaultTypeInternal _tpu_calc_res_default_instance_;
class tpu_conf_req;
class tpu_conf_reqDefaultTypeInternal;
extern tpu_conf_reqDefaultTypeInternal _tpu_conf_req_default_instance_;
class tpu_conf_res;
class tpu_conf_resDefaultTypeInternal;
extern tpu_conf_resDefaultTypeInternal _tpu_conf_res_default_instance_;
}  // namespace sla
PROTOBUF_NAMESPACE_OPEN
template<> ::sla::tpu_calc_req* Arena::CreateMaybeMessage<::sla::tpu_calc_req>(Arena*);
template<> ::sla::tpu_calc_res* Arena::CreateMaybeMessage<::sla::tpu_calc_res>(Arena*);
template<> ::sla::tpu_conf_req* Arena::CreateMaybeMessage<::sla::tpu_conf_req>(Arena*);
template<> ::sla::tpu_conf_res* Arena::CreateMaybeMessage<::sla::tpu_conf_res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sla {

// ===================================================================

class tpu_conf_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_conf_req) */ {
 public:
  tpu_conf_req();
  virtual ~tpu_conf_req();

  tpu_conf_req(const tpu_conf_req& from);
  tpu_conf_req(tpu_conf_req&& from) noexcept
    : tpu_conf_req() {
    *this = ::std::move(from);
  }

  inline tpu_conf_req& operator=(const tpu_conf_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_conf_req& operator=(tpu_conf_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_conf_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_conf_req* internal_default_instance() {
    return reinterpret_cast<const tpu_conf_req*>(
               &_tpu_conf_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tpu_conf_req& a, tpu_conf_req& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_conf_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_conf_req* New() const final {
    return CreateMaybeMessage<tpu_conf_req>(nullptr);
  }

  tpu_conf_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_conf_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_conf_req& from);
  void MergeFrom(const tpu_conf_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_conf_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_conf_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kScale1FieldNumber = 3,
    kScale2FieldNumber = 4,
  };
  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scale1 = 3;
  void clear_scale1();
  ::PROTOBUF_NAMESPACE_ID::int32 scale1() const;
  void set_scale1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale1() const;
  void _internal_set_scale1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scale2 = 4;
  void clear_scale2();
  ::PROTOBUF_NAMESPACE_ID::int32 scale2() const;
  void set_scale2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale2() const;
  void _internal_set_scale2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_conf_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale1_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class tpu_conf_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_conf_res) */ {
 public:
  tpu_conf_res();
  virtual ~tpu_conf_res();

  tpu_conf_res(const tpu_conf_res& from);
  tpu_conf_res(tpu_conf_res&& from) noexcept
    : tpu_conf_res() {
    *this = ::std::move(from);
  }

  inline tpu_conf_res& operator=(const tpu_conf_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_conf_res& operator=(tpu_conf_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_conf_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_conf_res* internal_default_instance() {
    return reinterpret_cast<const tpu_conf_res*>(
               &_tpu_conf_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tpu_conf_res& a, tpu_conf_res& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_conf_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_conf_res* New() const final {
    return CreateMaybeMessage<tpu_conf_res>(nullptr);
  }

  tpu_conf_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_conf_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_conf_res& from);
  void MergeFrom(const tpu_conf_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_conf_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_conf_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_conf_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class tpu_calc_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_calc_req) */ {
 public:
  tpu_calc_req();
  virtual ~tpu_calc_req();

  tpu_calc_req(const tpu_calc_req& from);
  tpu_calc_req(tpu_calc_req&& from) noexcept
    : tpu_calc_req() {
    *this = ::std::move(from);
  }

  inline tpu_calc_req& operator=(const tpu_calc_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_calc_req& operator=(tpu_calc_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_calc_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_calc_req* internal_default_instance() {
    return reinterpret_cast<const tpu_calc_req*>(
               &_tpu_calc_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(tpu_calc_req& a, tpu_calc_req& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_calc_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_calc_req* New() const final {
    return CreateMaybeMessage<tpu_calc_req>(nullptr);
  }

  tpu_calc_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_calc_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_calc_req& from);
  void MergeFrom(const tpu_calc_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_calc_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_calc_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefLfFieldNumber = 1,
    kRefHfFieldNumber = 2,
    kObjLfFieldNumber = 3,
    kObjHfFieldNumber = 4,
  };
  // string ref_lf = 1;
  void clear_ref_lf();
  const std::string& ref_lf() const;
  void set_ref_lf(const std::string& value);
  void set_ref_lf(std::string&& value);
  void set_ref_lf(const char* value);
  void set_ref_lf(const char* value, size_t size);
  std::string* mutable_ref_lf();
  std::string* release_ref_lf();
  void set_allocated_ref_lf(std::string* ref_lf);
  private:
  const std::string& _internal_ref_lf() const;
  void _internal_set_ref_lf(const std::string& value);
  std::string* _internal_mutable_ref_lf();
  public:

  // string ref_hf = 2;
  void clear_ref_hf();
  const std::string& ref_hf() const;
  void set_ref_hf(const std::string& value);
  void set_ref_hf(std::string&& value);
  void set_ref_hf(const char* value);
  void set_ref_hf(const char* value, size_t size);
  std::string* mutable_ref_hf();
  std::string* release_ref_hf();
  void set_allocated_ref_hf(std::string* ref_hf);
  private:
  const std::string& _internal_ref_hf() const;
  void _internal_set_ref_hf(const std::string& value);
  std::string* _internal_mutable_ref_hf();
  public:

  // string obj_lf = 3;
  void clear_obj_lf();
  const std::string& obj_lf() const;
  void set_obj_lf(const std::string& value);
  void set_obj_lf(std::string&& value);
  void set_obj_lf(const char* value);
  void set_obj_lf(const char* value, size_t size);
  std::string* mutable_obj_lf();
  std::string* release_obj_lf();
  void set_allocated_obj_lf(std::string* obj_lf);
  private:
  const std::string& _internal_obj_lf() const;
  void _internal_set_obj_lf(const std::string& value);
  std::string* _internal_mutable_obj_lf();
  public:

  // string obj_hf = 4;
  void clear_obj_hf();
  const std::string& obj_hf() const;
  void set_obj_hf(const std::string& value);
  void set_obj_hf(std::string&& value);
  void set_obj_hf(const char* value);
  void set_obj_hf(const char* value, size_t size);
  std::string* mutable_obj_hf();
  std::string* release_obj_hf();
  void set_allocated_obj_hf(std::string* obj_hf);
  private:
  const std::string& _internal_obj_hf() const;
  void _internal_set_obj_hf(const std::string& value);
  std::string* _internal_mutable_obj_hf();
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_calc_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_lf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_hf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_lf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_hf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class tpu_calc_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_calc_res) */ {
 public:
  tpu_calc_res();
  virtual ~tpu_calc_res();

  tpu_calc_res(const tpu_calc_res& from);
  tpu_calc_res(tpu_calc_res&& from) noexcept
    : tpu_calc_res() {
    *this = ::std::move(from);
  }

  inline tpu_calc_res& operator=(const tpu_calc_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_calc_res& operator=(tpu_calc_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_calc_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_calc_res* internal_default_instance() {
    return reinterpret_cast<const tpu_calc_res*>(
               &_tpu_calc_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(tpu_calc_res& a, tpu_calc_res& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_calc_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_calc_res* New() const final {
    return CreateMaybeMessage<tpu_calc_res>(nullptr);
  }

  tpu_calc_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_calc_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_calc_res& from);
  void MergeFrom(const tpu_calc_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_calc_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_calc_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlUnwrapPhaseFieldNumber = 1,
  };
  // string url_unwrap_phase = 1;
  void clear_url_unwrap_phase();
  const std::string& url_unwrap_phase() const;
  void set_url_unwrap_phase(const std::string& value);
  void set_url_unwrap_phase(std::string&& value);
  void set_url_unwrap_phase(const char* value);
  void set_url_unwrap_phase(const char* value, size_t size);
  std::string* mutable_url_unwrap_phase();
  std::string* release_url_unwrap_phase();
  void set_allocated_url_unwrap_phase(std::string* url_unwrap_phase);
  private:
  const std::string& _internal_url_unwrap_phase() const;
  void _internal_set_url_unwrap_phase(const std::string& value);
  std::string* _internal_mutable_url_unwrap_phase();
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_calc_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_unwrap_phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tpu_conf_req

// int32 width = 1;
inline void tpu_conf_req::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::width() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.width)
  return _internal_width();
}
inline void tpu_conf_req::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void tpu_conf_req::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.width)
}

// int32 height = 2;
inline void tpu_conf_req::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::height() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.height)
  return _internal_height();
}
inline void tpu_conf_req::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void tpu_conf_req::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.height)
}

// int32 scale1 = 3;
inline void tpu_conf_req::clear_scale1() {
  scale1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_scale1() const {
  return scale1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::scale1() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.scale1)
  return _internal_scale1();
}
inline void tpu_conf_req::_internal_set_scale1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale1_ = value;
}
inline void tpu_conf_req::set_scale1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale1(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.scale1)
}

// int32 scale2 = 4;
inline void tpu_conf_req::clear_scale2() {
  scale2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_scale2() const {
  return scale2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::scale2() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.scale2)
  return _internal_scale2();
}
inline void tpu_conf_req::_internal_set_scale2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale2_ = value;
}
inline void tpu_conf_req::set_scale2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale2(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.scale2)
}

// -------------------------------------------------------------------

// tpu_conf_res

// int32 status = 1;
inline void tpu_conf_res::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_res::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_res::status() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_res.status)
  return _internal_status();
}
inline void tpu_conf_res::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void tpu_conf_res::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_res.status)
}

// -------------------------------------------------------------------

// tpu_calc_req

// string ref_lf = 1;
inline void tpu_calc_req::clear_ref_lf() {
  ref_lf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_calc_req::ref_lf() const {
  // @@protoc_insertion_point(field_get:sla.tpu_calc_req.ref_lf)
  return _internal_ref_lf();
}
inline void tpu_calc_req::set_ref_lf(const std::string& value) {
  _internal_set_ref_lf(value);
  // @@protoc_insertion_point(field_set:sla.tpu_calc_req.ref_lf)
}
inline std::string* tpu_calc_req::mutable_ref_lf() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_calc_req.ref_lf)
  return _internal_mutable_ref_lf();
}
inline const std::string& tpu_calc_req::_internal_ref_lf() const {
  return ref_lf_.GetNoArena();
}
inline void tpu_calc_req::_internal_set_ref_lf(const std::string& value) {
  
  ref_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_calc_req::set_ref_lf(std::string&& value) {
  
  ref_lf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_calc_req.ref_lf)
}
inline void tpu_calc_req::set_ref_lf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_calc_req.ref_lf)
}
inline void tpu_calc_req::set_ref_lf(const char* value, size_t size) {
  
  ref_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_calc_req.ref_lf)
}
inline std::string* tpu_calc_req::_internal_mutable_ref_lf() {
  
  return ref_lf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_calc_req::release_ref_lf() {
  // @@protoc_insertion_point(field_release:sla.tpu_calc_req.ref_lf)
  
  return ref_lf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_calc_req::set_allocated_ref_lf(std::string* ref_lf) {
  if (ref_lf != nullptr) {
    
  } else {
    
  }
  ref_lf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_lf);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_calc_req.ref_lf)
}

// string ref_hf = 2;
inline void tpu_calc_req::clear_ref_hf() {
  ref_hf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_calc_req::ref_hf() const {
  // @@protoc_insertion_point(field_get:sla.tpu_calc_req.ref_hf)
  return _internal_ref_hf();
}
inline void tpu_calc_req::set_ref_hf(const std::string& value) {
  _internal_set_ref_hf(value);
  // @@protoc_insertion_point(field_set:sla.tpu_calc_req.ref_hf)
}
inline std::string* tpu_calc_req::mutable_ref_hf() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_calc_req.ref_hf)
  return _internal_mutable_ref_hf();
}
inline const std::string& tpu_calc_req::_internal_ref_hf() const {
  return ref_hf_.GetNoArena();
}
inline void tpu_calc_req::_internal_set_ref_hf(const std::string& value) {
  
  ref_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_calc_req::set_ref_hf(std::string&& value) {
  
  ref_hf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_calc_req.ref_hf)
}
inline void tpu_calc_req::set_ref_hf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_calc_req.ref_hf)
}
inline void tpu_calc_req::set_ref_hf(const char* value, size_t size) {
  
  ref_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_calc_req.ref_hf)
}
inline std::string* tpu_calc_req::_internal_mutable_ref_hf() {
  
  return ref_hf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_calc_req::release_ref_hf() {
  // @@protoc_insertion_point(field_release:sla.tpu_calc_req.ref_hf)
  
  return ref_hf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_calc_req::set_allocated_ref_hf(std::string* ref_hf) {
  if (ref_hf != nullptr) {
    
  } else {
    
  }
  ref_hf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_hf);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_calc_req.ref_hf)
}

// string obj_lf = 3;
inline void tpu_calc_req::clear_obj_lf() {
  obj_lf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_calc_req::obj_lf() const {
  // @@protoc_insertion_point(field_get:sla.tpu_calc_req.obj_lf)
  return _internal_obj_lf();
}
inline void tpu_calc_req::set_obj_lf(const std::string& value) {
  _internal_set_obj_lf(value);
  // @@protoc_insertion_point(field_set:sla.tpu_calc_req.obj_lf)
}
inline std::string* tpu_calc_req::mutable_obj_lf() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_calc_req.obj_lf)
  return _internal_mutable_obj_lf();
}
inline const std::string& tpu_calc_req::_internal_obj_lf() const {
  return obj_lf_.GetNoArena();
}
inline void tpu_calc_req::_internal_set_obj_lf(const std::string& value) {
  
  obj_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_calc_req::set_obj_lf(std::string&& value) {
  
  obj_lf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_calc_req.obj_lf)
}
inline void tpu_calc_req::set_obj_lf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_calc_req.obj_lf)
}
inline void tpu_calc_req::set_obj_lf(const char* value, size_t size) {
  
  obj_lf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_calc_req.obj_lf)
}
inline std::string* tpu_calc_req::_internal_mutable_obj_lf() {
  
  return obj_lf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_calc_req::release_obj_lf() {
  // @@protoc_insertion_point(field_release:sla.tpu_calc_req.obj_lf)
  
  return obj_lf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_calc_req::set_allocated_obj_lf(std::string* obj_lf) {
  if (obj_lf != nullptr) {
    
  } else {
    
  }
  obj_lf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_lf);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_calc_req.obj_lf)
}

// string obj_hf = 4;
inline void tpu_calc_req::clear_obj_hf() {
  obj_hf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_calc_req::obj_hf() const {
  // @@protoc_insertion_point(field_get:sla.tpu_calc_req.obj_hf)
  return _internal_obj_hf();
}
inline void tpu_calc_req::set_obj_hf(const std::string& value) {
  _internal_set_obj_hf(value);
  // @@protoc_insertion_point(field_set:sla.tpu_calc_req.obj_hf)
}
inline std::string* tpu_calc_req::mutable_obj_hf() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_calc_req.obj_hf)
  return _internal_mutable_obj_hf();
}
inline const std::string& tpu_calc_req::_internal_obj_hf() const {
  return obj_hf_.GetNoArena();
}
inline void tpu_calc_req::_internal_set_obj_hf(const std::string& value) {
  
  obj_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_calc_req::set_obj_hf(std::string&& value) {
  
  obj_hf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_calc_req.obj_hf)
}
inline void tpu_calc_req::set_obj_hf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_calc_req.obj_hf)
}
inline void tpu_calc_req::set_obj_hf(const char* value, size_t size) {
  
  obj_hf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_calc_req.obj_hf)
}
inline std::string* tpu_calc_req::_internal_mutable_obj_hf() {
  
  return obj_hf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_calc_req::release_obj_hf() {
  // @@protoc_insertion_point(field_release:sla.tpu_calc_req.obj_hf)
  
  return obj_hf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_calc_req::set_allocated_obj_hf(std::string* obj_hf) {
  if (obj_hf != nullptr) {
    
  } else {
    
  }
  obj_hf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_hf);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_calc_req.obj_hf)
}

// -------------------------------------------------------------------

// tpu_calc_res

// string url_unwrap_phase = 1;
inline void tpu_calc_res::clear_url_unwrap_phase() {
  url_unwrap_phase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_calc_res::url_unwrap_phase() const {
  // @@protoc_insertion_point(field_get:sla.tpu_calc_res.url_unwrap_phase)
  return _internal_url_unwrap_phase();
}
inline void tpu_calc_res::set_url_unwrap_phase(const std::string& value) {
  _internal_set_url_unwrap_phase(value);
  // @@protoc_insertion_point(field_set:sla.tpu_calc_res.url_unwrap_phase)
}
inline std::string* tpu_calc_res::mutable_url_unwrap_phase() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_calc_res.url_unwrap_phase)
  return _internal_mutable_url_unwrap_phase();
}
inline const std::string& tpu_calc_res::_internal_url_unwrap_phase() const {
  return url_unwrap_phase_.GetNoArena();
}
inline void tpu_calc_res::_internal_set_url_unwrap_phase(const std::string& value) {
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_calc_res::set_url_unwrap_phase(std::string&& value) {
  
  url_unwrap_phase_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_calc_res.url_unwrap_phase)
}
inline void tpu_calc_res::set_url_unwrap_phase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_calc_res.url_unwrap_phase)
}
inline void tpu_calc_res::set_url_unwrap_phase(const char* value, size_t size) {
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_calc_res.url_unwrap_phase)
}
inline std::string* tpu_calc_res::_internal_mutable_url_unwrap_phase() {
  
  return url_unwrap_phase_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_calc_res::release_url_unwrap_phase() {
  // @@protoc_insertion_point(field_release:sla.tpu_calc_res.url_unwrap_phase)
  
  return url_unwrap_phase_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_calc_res::set_allocated_url_unwrap_phase(std::string* url_unwrap_phase) {
  if (url_unwrap_phase != nullptr) {
    
  } else {
    
  }
  url_unwrap_phase_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_unwrap_phase);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_calc_res.url_unwrap_phase)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
