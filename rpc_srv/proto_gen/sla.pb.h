// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sla_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sla_2eproto;
namespace sla {
class depth_env_res;
class depth_env_resDefaultTypeInternal;
extern depth_env_resDefaultTypeInternal _depth_env_res_default_instance_;
class tpu_conf_req;
class tpu_conf_reqDefaultTypeInternal;
extern tpu_conf_reqDefaultTypeInternal _tpu_conf_req_default_instance_;
class tpu_env_req;
class tpu_env_reqDefaultTypeInternal;
extern tpu_env_reqDefaultTypeInternal _tpu_env_req_default_instance_;
class tpu_status_res;
class tpu_status_resDefaultTypeInternal;
extern tpu_status_resDefaultTypeInternal _tpu_status_res_default_instance_;
}  // namespace sla
PROTOBUF_NAMESPACE_OPEN
template<> ::sla::depth_env_res* Arena::CreateMaybeMessage<::sla::depth_env_res>(Arena*);
template<> ::sla::tpu_conf_req* Arena::CreateMaybeMessage<::sla::tpu_conf_req>(Arena*);
template<> ::sla::tpu_env_req* Arena::CreateMaybeMessage<::sla::tpu_env_req>(Arena*);
template<> ::sla::tpu_status_res* Arena::CreateMaybeMessage<::sla::tpu_status_res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sla {

// ===================================================================

class tpu_conf_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_conf_req) */ {
 public:
  tpu_conf_req();
  virtual ~tpu_conf_req();

  tpu_conf_req(const tpu_conf_req& from);
  tpu_conf_req(tpu_conf_req&& from) noexcept
    : tpu_conf_req() {
    *this = ::std::move(from);
  }

  inline tpu_conf_req& operator=(const tpu_conf_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_conf_req& operator=(tpu_conf_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_conf_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_conf_req* internal_default_instance() {
    return reinterpret_cast<const tpu_conf_req*>(
               &_tpu_conf_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tpu_conf_req& a, tpu_conf_req& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_conf_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_conf_req* New() const final {
    return CreateMaybeMessage<tpu_conf_req>(nullptr);
  }

  tpu_conf_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_conf_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_conf_req& from);
  void MergeFrom(const tpu_conf_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_conf_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_conf_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImplFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFreqRatioFieldNumber = 4,
    kRealScaleFieldNumber = 5,
  };
  // string impl = 1;
  void clear_impl();
  const std::string& impl() const;
  void set_impl(const std::string& value);
  void set_impl(std::string&& value);
  void set_impl(const char* value);
  void set_impl(const char* value, size_t size);
  std::string* mutable_impl();
  std::string* release_impl();
  void set_allocated_impl(std::string* impl);
  private:
  const std::string& _internal_impl() const;
  void _internal_set_impl(const std::string& value);
  std::string* _internal_mutable_impl();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float freq_ratio = 4;
  void clear_freq_ratio();
  float freq_ratio() const;
  void set_freq_ratio(float value);
  private:
  float _internal_freq_ratio() const;
  void _internal_set_freq_ratio(float value);
  public:

  // float real_scale = 5;
  void clear_real_scale();
  float real_scale() const;
  void set_real_scale(float value);
  private:
  float _internal_real_scale() const;
  void _internal_set_real_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_conf_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impl_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float freq_ratio_;
  float real_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class tpu_status_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_status_res) */ {
 public:
  tpu_status_res();
  virtual ~tpu_status_res();

  tpu_status_res(const tpu_status_res& from);
  tpu_status_res(tpu_status_res&& from) noexcept
    : tpu_status_res() {
    *this = ::std::move(from);
  }

  inline tpu_status_res& operator=(const tpu_status_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_status_res& operator=(tpu_status_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_status_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_status_res* internal_default_instance() {
    return reinterpret_cast<const tpu_status_res*>(
               &_tpu_status_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tpu_status_res& a, tpu_status_res& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_status_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_status_res* New() const final {
    return CreateMaybeMessage<tpu_status_res>(nullptr);
  }

  tpu_status_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_status_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_status_res& from);
  void MergeFrom(const tpu_status_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_status_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_status_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_status_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class tpu_env_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.tpu_env_req) */ {
 public:
  tpu_env_req();
  virtual ~tpu_env_req();

  tpu_env_req(const tpu_env_req& from);
  tpu_env_req(tpu_env_req&& from) noexcept
    : tpu_env_req() {
    *this = ::std::move(from);
  }

  inline tpu_env_req& operator=(const tpu_env_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline tpu_env_req& operator=(tpu_env_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tpu_env_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tpu_env_req* internal_default_instance() {
    return reinterpret_cast<const tpu_env_req*>(
               &_tpu_env_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(tpu_env_req& a, tpu_env_req& b) {
    a.Swap(&b);
  }
  inline void Swap(tpu_env_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tpu_env_req* New() const final {
    return CreateMaybeMessage<tpu_env_req>(nullptr);
  }

  tpu_env_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tpu_env_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tpu_env_req& from);
  void MergeFrom(const tpu_env_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tpu_env_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.tpu_env_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLfImgFieldNumber = 1,
    kHfImgFieldNumber = 2,
  };
  // repeated string lf_img = 1;
  int lf_img_size() const;
  private:
  int _internal_lf_img_size() const;
  public:
  void clear_lf_img();
  const std::string& lf_img(int index) const;
  std::string* mutable_lf_img(int index);
  void set_lf_img(int index, const std::string& value);
  void set_lf_img(int index, std::string&& value);
  void set_lf_img(int index, const char* value);
  void set_lf_img(int index, const char* value, size_t size);
  std::string* add_lf_img();
  void add_lf_img(const std::string& value);
  void add_lf_img(std::string&& value);
  void add_lf_img(const char* value);
  void add_lf_img(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lf_img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lf_img();
  private:
  const std::string& _internal_lf_img(int index) const;
  std::string* _internal_add_lf_img();
  public:

  // repeated string hf_img = 2;
  int hf_img_size() const;
  private:
  int _internal_hf_img_size() const;
  public:
  void clear_hf_img();
  const std::string& hf_img(int index) const;
  std::string* mutable_hf_img(int index);
  void set_hf_img(int index, const std::string& value);
  void set_hf_img(int index, std::string&& value);
  void set_hf_img(int index, const char* value);
  void set_hf_img(int index, const char* value, size_t size);
  std::string* add_hf_img();
  void add_hf_img(const std::string& value);
  void add_hf_img(std::string&& value);
  void add_hf_img(const char* value);
  void add_hf_img(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hf_img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hf_img();
  private:
  const std::string& _internal_hf_img(int index) const;
  std::string* _internal_add_hf_img();
  public:

  // @@protoc_insertion_point(class_scope:sla.tpu_env_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lf_img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hf_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// -------------------------------------------------------------------

class depth_env_res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sla.depth_env_res) */ {
 public:
  depth_env_res();
  virtual ~depth_env_res();

  depth_env_res(const depth_env_res& from);
  depth_env_res(depth_env_res&& from) noexcept
    : depth_env_res() {
    *this = ::std::move(from);
  }

  inline depth_env_res& operator=(const depth_env_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline depth_env_res& operator=(depth_env_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depth_env_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depth_env_res* internal_default_instance() {
    return reinterpret_cast<const depth_env_res*>(
               &_depth_env_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(depth_env_res& a, depth_env_res& b) {
    a.Swap(&b);
  }
  inline void Swap(depth_env_res* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depth_env_res* New() const final {
    return CreateMaybeMessage<depth_env_res>(nullptr);
  }

  depth_env_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depth_env_res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depth_env_res& from);
  void MergeFrom(const depth_env_res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depth_env_res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sla.depth_env_res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sla_2eproto);
    return ::descriptor_table_sla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlUnwrapPhaseFieldNumber = 1,
  };
  // string url_unwrap_phase = 1;
  void clear_url_unwrap_phase();
  const std::string& url_unwrap_phase() const;
  void set_url_unwrap_phase(const std::string& value);
  void set_url_unwrap_phase(std::string&& value);
  void set_url_unwrap_phase(const char* value);
  void set_url_unwrap_phase(const char* value, size_t size);
  std::string* mutable_url_unwrap_phase();
  std::string* release_url_unwrap_phase();
  void set_allocated_url_unwrap_phase(std::string* url_unwrap_phase);
  private:
  const std::string& _internal_url_unwrap_phase() const;
  void _internal_set_url_unwrap_phase(const std::string& value);
  std::string* _internal_mutable_url_unwrap_phase();
  public:

  // @@protoc_insertion_point(class_scope:sla.depth_env_res)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_unwrap_phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tpu_conf_req

// string impl = 1;
inline void tpu_conf_req::clear_impl() {
  impl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& tpu_conf_req::impl() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.impl)
  return _internal_impl();
}
inline void tpu_conf_req::set_impl(const std::string& value) {
  _internal_set_impl(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.impl)
}
inline std::string* tpu_conf_req::mutable_impl() {
  // @@protoc_insertion_point(field_mutable:sla.tpu_conf_req.impl)
  return _internal_mutable_impl();
}
inline const std::string& tpu_conf_req::_internal_impl() const {
  return impl_.GetNoArena();
}
inline void tpu_conf_req::_internal_set_impl(const std::string& value) {
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void tpu_conf_req::set_impl(std::string&& value) {
  
  impl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.tpu_conf_req.impl)
}
inline void tpu_conf_req::set_impl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.tpu_conf_req.impl)
}
inline void tpu_conf_req::set_impl(const char* value, size_t size) {
  
  impl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_conf_req.impl)
}
inline std::string* tpu_conf_req::_internal_mutable_impl() {
  
  return impl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* tpu_conf_req::release_impl() {
  // @@protoc_insertion_point(field_release:sla.tpu_conf_req.impl)
  
  return impl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void tpu_conf_req::set_allocated_impl(std::string* impl) {
  if (impl != nullptr) {
    
  } else {
    
  }
  impl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impl);
  // @@protoc_insertion_point(field_set_allocated:sla.tpu_conf_req.impl)
}

// int32 width = 2;
inline void tpu_conf_req::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::width() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.width)
  return _internal_width();
}
inline void tpu_conf_req::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void tpu_conf_req::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.width)
}

// int32 height = 3;
inline void tpu_conf_req::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_conf_req::height() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.height)
  return _internal_height();
}
inline void tpu_conf_req::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void tpu_conf_req::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.height)
}

// float freq_ratio = 4;
inline void tpu_conf_req::clear_freq_ratio() {
  freq_ratio_ = 0;
}
inline float tpu_conf_req::_internal_freq_ratio() const {
  return freq_ratio_;
}
inline float tpu_conf_req::freq_ratio() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.freq_ratio)
  return _internal_freq_ratio();
}
inline void tpu_conf_req::_internal_set_freq_ratio(float value) {
  
  freq_ratio_ = value;
}
inline void tpu_conf_req::set_freq_ratio(float value) {
  _internal_set_freq_ratio(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.freq_ratio)
}

// float real_scale = 5;
inline void tpu_conf_req::clear_real_scale() {
  real_scale_ = 0;
}
inline float tpu_conf_req::_internal_real_scale() const {
  return real_scale_;
}
inline float tpu_conf_req::real_scale() const {
  // @@protoc_insertion_point(field_get:sla.tpu_conf_req.real_scale)
  return _internal_real_scale();
}
inline void tpu_conf_req::_internal_set_real_scale(float value) {
  
  real_scale_ = value;
}
inline void tpu_conf_req::set_real_scale(float value) {
  _internal_set_real_scale(value);
  // @@protoc_insertion_point(field_set:sla.tpu_conf_req.real_scale)
}

// -------------------------------------------------------------------

// tpu_status_res

// int32 status = 1;
inline void tpu_status_res::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_status_res::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tpu_status_res::status() const {
  // @@protoc_insertion_point(field_get:sla.tpu_status_res.status)
  return _internal_status();
}
inline void tpu_status_res::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void tpu_status_res::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sla.tpu_status_res.status)
}

// -------------------------------------------------------------------

// tpu_env_req

// repeated string lf_img = 1;
inline int tpu_env_req::_internal_lf_img_size() const {
  return lf_img_.size();
}
inline int tpu_env_req::lf_img_size() const {
  return _internal_lf_img_size();
}
inline void tpu_env_req::clear_lf_img() {
  lf_img_.Clear();
}
inline std::string* tpu_env_req::add_lf_img() {
  // @@protoc_insertion_point(field_add_mutable:sla.tpu_env_req.lf_img)
  return _internal_add_lf_img();
}
inline const std::string& tpu_env_req::_internal_lf_img(int index) const {
  return lf_img_.Get(index);
}
inline const std::string& tpu_env_req::lf_img(int index) const {
  // @@protoc_insertion_point(field_get:sla.tpu_env_req.lf_img)
  return _internal_lf_img(index);
}
inline std::string* tpu_env_req::mutable_lf_img(int index) {
  // @@protoc_insertion_point(field_mutable:sla.tpu_env_req.lf_img)
  return lf_img_.Mutable(index);
}
inline void tpu_env_req::set_lf_img(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sla.tpu_env_req.lf_img)
  lf_img_.Mutable(index)->assign(value);
}
inline void tpu_env_req::set_lf_img(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sla.tpu_env_req.lf_img)
  lf_img_.Mutable(index)->assign(std::move(value));
}
inline void tpu_env_req::set_lf_img(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lf_img_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sla.tpu_env_req.lf_img)
}
inline void tpu_env_req::set_lf_img(int index, const char* value, size_t size) {
  lf_img_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_env_req.lf_img)
}
inline std::string* tpu_env_req::_internal_add_lf_img() {
  return lf_img_.Add();
}
inline void tpu_env_req::add_lf_img(const std::string& value) {
  lf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sla.tpu_env_req.lf_img)
}
inline void tpu_env_req::add_lf_img(std::string&& value) {
  lf_img_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sla.tpu_env_req.lf_img)
}
inline void tpu_env_req::add_lf_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sla.tpu_env_req.lf_img)
}
inline void tpu_env_req::add_lf_img(const char* value, size_t size) {
  lf_img_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sla.tpu_env_req.lf_img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
tpu_env_req::lf_img() const {
  // @@protoc_insertion_point(field_list:sla.tpu_env_req.lf_img)
  return lf_img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
tpu_env_req::mutable_lf_img() {
  // @@protoc_insertion_point(field_mutable_list:sla.tpu_env_req.lf_img)
  return &lf_img_;
}

// repeated string hf_img = 2;
inline int tpu_env_req::_internal_hf_img_size() const {
  return hf_img_.size();
}
inline int tpu_env_req::hf_img_size() const {
  return _internal_hf_img_size();
}
inline void tpu_env_req::clear_hf_img() {
  hf_img_.Clear();
}
inline std::string* tpu_env_req::add_hf_img() {
  // @@protoc_insertion_point(field_add_mutable:sla.tpu_env_req.hf_img)
  return _internal_add_hf_img();
}
inline const std::string& tpu_env_req::_internal_hf_img(int index) const {
  return hf_img_.Get(index);
}
inline const std::string& tpu_env_req::hf_img(int index) const {
  // @@protoc_insertion_point(field_get:sla.tpu_env_req.hf_img)
  return _internal_hf_img(index);
}
inline std::string* tpu_env_req::mutable_hf_img(int index) {
  // @@protoc_insertion_point(field_mutable:sla.tpu_env_req.hf_img)
  return hf_img_.Mutable(index);
}
inline void tpu_env_req::set_hf_img(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sla.tpu_env_req.hf_img)
  hf_img_.Mutable(index)->assign(value);
}
inline void tpu_env_req::set_hf_img(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sla.tpu_env_req.hf_img)
  hf_img_.Mutable(index)->assign(std::move(value));
}
inline void tpu_env_req::set_hf_img(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hf_img_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sla.tpu_env_req.hf_img)
}
inline void tpu_env_req::set_hf_img(int index, const char* value, size_t size) {
  hf_img_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sla.tpu_env_req.hf_img)
}
inline std::string* tpu_env_req::_internal_add_hf_img() {
  return hf_img_.Add();
}
inline void tpu_env_req::add_hf_img(const std::string& value) {
  hf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sla.tpu_env_req.hf_img)
}
inline void tpu_env_req::add_hf_img(std::string&& value) {
  hf_img_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sla.tpu_env_req.hf_img)
}
inline void tpu_env_req::add_hf_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hf_img_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sla.tpu_env_req.hf_img)
}
inline void tpu_env_req::add_hf_img(const char* value, size_t size) {
  hf_img_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sla.tpu_env_req.hf_img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
tpu_env_req::hf_img() const {
  // @@protoc_insertion_point(field_list:sla.tpu_env_req.hf_img)
  return hf_img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
tpu_env_req::mutable_hf_img() {
  // @@protoc_insertion_point(field_mutable_list:sla.tpu_env_req.hf_img)
  return &hf_img_;
}

// -------------------------------------------------------------------

// depth_env_res

// string url_unwrap_phase = 1;
inline void depth_env_res::clear_url_unwrap_phase() {
  url_unwrap_phase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& depth_env_res::url_unwrap_phase() const {
  // @@protoc_insertion_point(field_get:sla.depth_env_res.url_unwrap_phase)
  return _internal_url_unwrap_phase();
}
inline void depth_env_res::set_url_unwrap_phase(const std::string& value) {
  _internal_set_url_unwrap_phase(value);
  // @@protoc_insertion_point(field_set:sla.depth_env_res.url_unwrap_phase)
}
inline std::string* depth_env_res::mutable_url_unwrap_phase() {
  // @@protoc_insertion_point(field_mutable:sla.depth_env_res.url_unwrap_phase)
  return _internal_mutable_url_unwrap_phase();
}
inline const std::string& depth_env_res::_internal_url_unwrap_phase() const {
  return url_unwrap_phase_.GetNoArena();
}
inline void depth_env_res::_internal_set_url_unwrap_phase(const std::string& value) {
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depth_env_res::set_url_unwrap_phase(std::string&& value) {
  
  url_unwrap_phase_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sla.depth_env_res.url_unwrap_phase)
}
inline void depth_env_res::set_url_unwrap_phase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sla.depth_env_res.url_unwrap_phase)
}
inline void depth_env_res::set_url_unwrap_phase(const char* value, size_t size) {
  
  url_unwrap_phase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sla.depth_env_res.url_unwrap_phase)
}
inline std::string* depth_env_res::_internal_mutable_url_unwrap_phase() {
  
  return url_unwrap_phase_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depth_env_res::release_url_unwrap_phase() {
  // @@protoc_insertion_point(field_release:sla.depth_env_res.url_unwrap_phase)
  
  return url_unwrap_phase_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depth_env_res::set_allocated_url_unwrap_phase(std::string* url_unwrap_phase) {
  if (url_unwrap_phase != nullptr) {
    
  } else {
    
  }
  url_unwrap_phase_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_unwrap_phase);
  // @@protoc_insertion_point(field_set_allocated:sla.depth_env_res.url_unwrap_phase)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sla_2eproto
