// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sla.proto

#include "sla.pb.h"
#include "sla.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sla {

static const char* tpu_method_names[] = {
  "/sla.tpu/_init",
  "/sla.tpu/_invoke",
};

std::unique_ptr< tpu::Stub> tpu::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< tpu::Stub> stub(new tpu::Stub(channel));
  return stub;
}

tpu::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod__init_(tpu_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod__invoke_(tpu_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status tpu::Stub::_init(::grpc::ClientContext* context, const ::sla::tpu_conf_req& request, ::sla::tpu_conf_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__init_, context, request, response);
}

void tpu::Stub::experimental_async::_init(::grpc::ClientContext* context, const ::sla::tpu_conf_req* request, ::sla::tpu_conf_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__init_, context, request, response, std::move(f));
}

void tpu::Stub::experimental_async::_init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::tpu_conf_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__init_, context, request, response, std::move(f));
}

void tpu::Stub::experimental_async::_init(::grpc::ClientContext* context, const ::sla::tpu_conf_req* request, ::sla::tpu_conf_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__init_, context, request, response, reactor);
}

void tpu::Stub::experimental_async::_init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::tpu_conf_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::tpu_conf_res>* tpu::Stub::Async_initRaw(::grpc::ClientContext* context, const ::sla::tpu_conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::tpu_conf_res>::Create(channel_.get(), cq, rpcmethod__init_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::tpu_conf_res>* tpu::Stub::PrepareAsync_initRaw(::grpc::ClientContext* context, const ::sla::tpu_conf_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::tpu_conf_res>::Create(channel_.get(), cq, rpcmethod__init_, context, request, false);
}

::grpc::Status tpu::Stub::_invoke(::grpc::ClientContext* context, const ::sla::tpu_calc_req& request, ::sla::tpu_calc_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod__invoke_, context, request, response);
}

void tpu::Stub::experimental_async::_invoke(::grpc::ClientContext* context, const ::sla::tpu_calc_req* request, ::sla::tpu_calc_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__invoke_, context, request, response, std::move(f));
}

void tpu::Stub::experimental_async::_invoke(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::tpu_calc_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod__invoke_, context, request, response, std::move(f));
}

void tpu::Stub::experimental_async::_invoke(::grpc::ClientContext* context, const ::sla::tpu_calc_req* request, ::sla::tpu_calc_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__invoke_, context, request, response, reactor);
}

void tpu::Stub::experimental_async::_invoke(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sla::tpu_calc_res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod__invoke_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sla::tpu_calc_res>* tpu::Stub::Async_invokeRaw(::grpc::ClientContext* context, const ::sla::tpu_calc_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::tpu_calc_res>::Create(channel_.get(), cq, rpcmethod__invoke_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sla::tpu_calc_res>* tpu::Stub::PrepareAsync_invokeRaw(::grpc::ClientContext* context, const ::sla::tpu_calc_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sla::tpu_calc_res>::Create(channel_.get(), cq, rpcmethod__invoke_, context, request, false);
}

tpu::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tpu_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tpu::Service, ::sla::tpu_conf_req, ::sla::tpu_conf_res>(
          std::mem_fn(&tpu::Service::_init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tpu_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tpu::Service, ::sla::tpu_calc_req, ::sla::tpu_calc_res>(
          std::mem_fn(&tpu::Service::_invoke), this)));
}

tpu::Service::~Service() {
}

::grpc::Status tpu::Service::_init(::grpc::ServerContext* context, const ::sla::tpu_conf_req* request, ::sla::tpu_conf_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tpu::Service::_invoke(::grpc::ServerContext* context, const ::sla::tpu_calc_req* request, ::sla::tpu_calc_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sla

