// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sla.proto

#include "sla.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sla {
class tpu_conf_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tpu_conf_req> _instance;
} _tpu_conf_req_default_instance_;
class tpu_status_resDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tpu_status_res> _instance;
} _tpu_status_res_default_instance_;
class tpu_env_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tpu_env_req> _instance;
} _tpu_env_req_default_instance_;
class depth_env_resDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depth_env_res> _instance;
} _depth_env_res_default_instance_;
}  // namespace sla
static void InitDefaultsscc_info_depth_env_res_sla_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sla::_depth_env_res_default_instance_;
    new (ptr) ::sla::depth_env_res();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sla::depth_env_res::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_depth_env_res_sla_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_depth_env_res_sla_2eproto}, {}};

static void InitDefaultsscc_info_tpu_conf_req_sla_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sla::_tpu_conf_req_default_instance_;
    new (ptr) ::sla::tpu_conf_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sla::tpu_conf_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tpu_conf_req_sla_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tpu_conf_req_sla_2eproto}, {}};

static void InitDefaultsscc_info_tpu_env_req_sla_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sla::_tpu_env_req_default_instance_;
    new (ptr) ::sla::tpu_env_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sla::tpu_env_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tpu_env_req_sla_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tpu_env_req_sla_2eproto}, {}};

static void InitDefaultsscc_info_tpu_status_res_sla_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sla::_tpu_status_res_default_instance_;
    new (ptr) ::sla::tpu_status_res();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sla::tpu_status_res::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tpu_status_res_sla_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tpu_status_res_sla_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sla_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sla_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sla_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sla_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, impl_),
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, width_),
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, height_),
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, freq_ratio_),
  PROTOBUF_FIELD_OFFSET(::sla::tpu_conf_req, real_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_status_res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_status_res, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_env_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sla::tpu_env_req, lf_img_),
  PROTOBUF_FIELD_OFFSET(::sla::tpu_env_req, hf_img_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sla::depth_env_res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sla::depth_env_res, url_unwrap_phase_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sla::tpu_conf_req)},
  { 10, -1, sizeof(::sla::tpu_status_res)},
  { 16, -1, sizeof(::sla::tpu_env_req)},
  { 23, -1, sizeof(::sla::depth_env_res)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sla::_tpu_conf_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sla::_tpu_status_res_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sla::_tpu_env_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sla::_depth_env_res_default_instance_),
};

const char descriptor_table_protodef_sla_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsla.proto\022\003sla\"c\n\014tpu_conf_req\022\014\n\004impl"
  "\030\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\022\n"
  "\nfreq_ratio\030\004 \001(\002\022\022\n\nreal_scale\030\005 \001(\002\" \n"
  "\016tpu_status_res\022\016\n\006status\030\001 \001(\005\"-\n\013tpu_e"
  "nv_req\022\016\n\006lf_img\030\001 \003(\t\022\016\n\006hf_img\030\002 \003(\t\")"
  "\n\rdepth_env_res\022\030\n\020url_unwrap_phase\030\001 \001("
  "\t2\261\001\n\003tpu\0221\n\005_init\022\021.sla.tpu_conf_req\032\023."
  "sla.tpu_status_res\"\000\022=\n\022_ref_phase_compu"
  "te\022\020.sla.tpu_env_req\032\023.sla.tpu_status_re"
  "s\"\000\0228\n\016_depth_compute\022\020.sla.tpu_env_req\032"
  "\022.sla.depth_env_res\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sla_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sla_2eproto_sccs[4] = {
  &scc_info_depth_env_res_sla_2eproto.base,
  &scc_info_tpu_conf_req_sla_2eproto.base,
  &scc_info_tpu_env_req_sla_2eproto.base,
  &scc_info_tpu_status_res_sla_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sla_2eproto_once;
static bool descriptor_table_sla_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sla_2eproto = {
  &descriptor_table_sla_2eproto_initialized, descriptor_table_protodef_sla_2eproto, "sla.proto", 429,
  &descriptor_table_sla_2eproto_once, descriptor_table_sla_2eproto_sccs, descriptor_table_sla_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_sla_2eproto::offsets,
  file_level_metadata_sla_2eproto, 4, file_level_enum_descriptors_sla_2eproto, file_level_service_descriptors_sla_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sla_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sla_2eproto), true);
namespace sla {

// ===================================================================

void tpu_conf_req::InitAsDefaultInstance() {
}
class tpu_conf_req::_Internal {
 public:
};

tpu_conf_req::tpu_conf_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sla.tpu_conf_req)
}
tpu_conf_req::tpu_conf_req(const tpu_conf_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_impl().empty()) {
    impl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.impl_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&real_scale_) -
    reinterpret_cast<char*>(&width_)) + sizeof(real_scale_));
  // @@protoc_insertion_point(copy_constructor:sla.tpu_conf_req)
}

void tpu_conf_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tpu_conf_req_sla_2eproto.base);
  impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_scale_) -
      reinterpret_cast<char*>(&width_)) + sizeof(real_scale_));
}

tpu_conf_req::~tpu_conf_req() {
  // @@protoc_insertion_point(destructor:sla.tpu_conf_req)
  SharedDtor();
}

void tpu_conf_req::SharedDtor() {
  impl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tpu_conf_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tpu_conf_req& tpu_conf_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tpu_conf_req_sla_2eproto.base);
  return *internal_default_instance();
}


void tpu_conf_req::Clear() {
// @@protoc_insertion_point(message_clear_start:sla.tpu_conf_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_scale_) -
      reinterpret_cast<char*>(&width_)) + sizeof(real_scale_));
  _internal_metadata_.Clear();
}

const char* tpu_conf_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string impl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_impl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sla.tpu_conf_req.impl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float freq_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          freq_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float real_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          real_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tpu_conf_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sla.tpu_conf_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string impl = 1;
  if (this->impl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_impl().data(), static_cast<int>(this->_internal_impl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sla.tpu_conf_req.impl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_impl(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // float freq_ratio = 4;
  if (!(this->freq_ratio() <= 0 && this->freq_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_freq_ratio(), target);
  }

  // float real_scale = 5;
  if (!(this->real_scale() <= 0 && this->real_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_real_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sla.tpu_conf_req)
  return target;
}

size_t tpu_conf_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sla.tpu_conf_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string impl = 1;
  if (this->impl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_impl());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // float freq_ratio = 4;
  if (!(this->freq_ratio() <= 0 && this->freq_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float real_scale = 5;
  if (!(this->real_scale() <= 0 && this->real_scale() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tpu_conf_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sla.tpu_conf_req)
  GOOGLE_DCHECK_NE(&from, this);
  const tpu_conf_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tpu_conf_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sla.tpu_conf_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sla.tpu_conf_req)
    MergeFrom(*source);
  }
}

void tpu_conf_req::MergeFrom(const tpu_conf_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sla.tpu_conf_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.impl().size() > 0) {

    impl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.impl_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.freq_ratio() <= 0 && from.freq_ratio() >= 0)) {
    _internal_set_freq_ratio(from._internal_freq_ratio());
  }
  if (!(from.real_scale() <= 0 && from.real_scale() >= 0)) {
    _internal_set_real_scale(from._internal_real_scale());
  }
}

void tpu_conf_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sla.tpu_conf_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tpu_conf_req::CopyFrom(const tpu_conf_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sla.tpu_conf_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tpu_conf_req::IsInitialized() const {
  return true;
}

void tpu_conf_req::InternalSwap(tpu_conf_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  impl_.Swap(&other->impl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(freq_ratio_, other->freq_ratio_);
  swap(real_scale_, other->real_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tpu_conf_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tpu_status_res::InitAsDefaultInstance() {
}
class tpu_status_res::_Internal {
 public:
};

tpu_status_res::tpu_status_res()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sla.tpu_status_res)
}
tpu_status_res::tpu_status_res(const tpu_status_res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sla.tpu_status_res)
}

void tpu_status_res::SharedCtor() {
  status_ = 0;
}

tpu_status_res::~tpu_status_res() {
  // @@protoc_insertion_point(destructor:sla.tpu_status_res)
  SharedDtor();
}

void tpu_status_res::SharedDtor() {
}

void tpu_status_res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tpu_status_res& tpu_status_res::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tpu_status_res_sla_2eproto.base);
  return *internal_default_instance();
}


void tpu_status_res::Clear() {
// @@protoc_insertion_point(message_clear_start:sla.tpu_status_res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* tpu_status_res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tpu_status_res::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sla.tpu_status_res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sla.tpu_status_res)
  return target;
}

size_t tpu_status_res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sla.tpu_status_res)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tpu_status_res::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sla.tpu_status_res)
  GOOGLE_DCHECK_NE(&from, this);
  const tpu_status_res* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tpu_status_res>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sla.tpu_status_res)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sla.tpu_status_res)
    MergeFrom(*source);
  }
}

void tpu_status_res::MergeFrom(const tpu_status_res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sla.tpu_status_res)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void tpu_status_res::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sla.tpu_status_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tpu_status_res::CopyFrom(const tpu_status_res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sla.tpu_status_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tpu_status_res::IsInitialized() const {
  return true;
}

void tpu_status_res::InternalSwap(tpu_status_res* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tpu_status_res::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tpu_env_req::InitAsDefaultInstance() {
}
class tpu_env_req::_Internal {
 public:
};

tpu_env_req::tpu_env_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sla.tpu_env_req)
}
tpu_env_req::tpu_env_req(const tpu_env_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lf_img_(from.lf_img_),
      hf_img_(from.hf_img_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sla.tpu_env_req)
}

void tpu_env_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tpu_env_req_sla_2eproto.base);
}

tpu_env_req::~tpu_env_req() {
  // @@protoc_insertion_point(destructor:sla.tpu_env_req)
  SharedDtor();
}

void tpu_env_req::SharedDtor() {
}

void tpu_env_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tpu_env_req& tpu_env_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tpu_env_req_sla_2eproto.base);
  return *internal_default_instance();
}


void tpu_env_req::Clear() {
// @@protoc_insertion_point(message_clear_start:sla.tpu_env_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lf_img_.Clear();
  hf_img_.Clear();
  _internal_metadata_.Clear();
}

const char* tpu_env_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string lf_img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lf_img();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sla.tpu_env_req.lf_img"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string hf_img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hf_img();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sla.tpu_env_req.hf_img"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tpu_env_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sla.tpu_env_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lf_img = 1;
  for (int i = 0, n = this->_internal_lf_img_size(); i < n; i++) {
    const auto& s = this->_internal_lf_img(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sla.tpu_env_req.lf_img");
    target = stream->WriteString(1, s, target);
  }

  // repeated string hf_img = 2;
  for (int i = 0, n = this->_internal_hf_img_size(); i < n; i++) {
    const auto& s = this->_internal_hf_img(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sla.tpu_env_req.hf_img");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sla.tpu_env_req)
  return target;
}

size_t tpu_env_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sla.tpu_env_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lf_img = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lf_img_.size());
  for (int i = 0, n = lf_img_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lf_img_.Get(i));
  }

  // repeated string hf_img = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hf_img_.size());
  for (int i = 0, n = hf_img_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hf_img_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tpu_env_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sla.tpu_env_req)
  GOOGLE_DCHECK_NE(&from, this);
  const tpu_env_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tpu_env_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sla.tpu_env_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sla.tpu_env_req)
    MergeFrom(*source);
  }
}

void tpu_env_req::MergeFrom(const tpu_env_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sla.tpu_env_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lf_img_.MergeFrom(from.lf_img_);
  hf_img_.MergeFrom(from.hf_img_);
}

void tpu_env_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sla.tpu_env_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tpu_env_req::CopyFrom(const tpu_env_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sla.tpu_env_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tpu_env_req::IsInitialized() const {
  return true;
}

void tpu_env_req::InternalSwap(tpu_env_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lf_img_.InternalSwap(&other->lf_img_);
  hf_img_.InternalSwap(&other->hf_img_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tpu_env_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void depth_env_res::InitAsDefaultInstance() {
}
class depth_env_res::_Internal {
 public:
};

depth_env_res::depth_env_res()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sla.depth_env_res)
}
depth_env_res::depth_env_res(const depth_env_res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_unwrap_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url_unwrap_phase().empty()) {
    url_unwrap_phase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_unwrap_phase_);
  }
  // @@protoc_insertion_point(copy_constructor:sla.depth_env_res)
}

void depth_env_res::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depth_env_res_sla_2eproto.base);
  url_unwrap_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

depth_env_res::~depth_env_res() {
  // @@protoc_insertion_point(destructor:sla.depth_env_res)
  SharedDtor();
}

void depth_env_res::SharedDtor() {
  url_unwrap_phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void depth_env_res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depth_env_res& depth_env_res::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depth_env_res_sla_2eproto.base);
  return *internal_default_instance();
}


void depth_env_res::Clear() {
// @@protoc_insertion_point(message_clear_start:sla.depth_env_res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_unwrap_phase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* depth_env_res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url_unwrap_phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url_unwrap_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sla.depth_env_res.url_unwrap_phase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depth_env_res::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sla.depth_env_res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url_unwrap_phase = 1;
  if (this->url_unwrap_phase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url_unwrap_phase().data(), static_cast<int>(this->_internal_url_unwrap_phase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sla.depth_env_res.url_unwrap_phase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url_unwrap_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sla.depth_env_res)
  return target;
}

size_t depth_env_res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sla.depth_env_res)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url_unwrap_phase = 1;
  if (this->url_unwrap_phase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url_unwrap_phase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depth_env_res::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sla.depth_env_res)
  GOOGLE_DCHECK_NE(&from, this);
  const depth_env_res* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depth_env_res>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sla.depth_env_res)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sla.depth_env_res)
    MergeFrom(*source);
  }
}

void depth_env_res::MergeFrom(const depth_env_res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sla.depth_env_res)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url_unwrap_phase().size() > 0) {

    url_unwrap_phase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_unwrap_phase_);
  }
}

void depth_env_res::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sla.depth_env_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_env_res::CopyFrom(const depth_env_res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sla.depth_env_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_env_res::IsInitialized() const {
  return true;
}

void depth_env_res::InternalSwap(depth_env_res* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_unwrap_phase_.Swap(&other->url_unwrap_phase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata depth_env_res::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sla::tpu_conf_req* Arena::CreateMaybeMessage< ::sla::tpu_conf_req >(Arena* arena) {
  return Arena::CreateInternal< ::sla::tpu_conf_req >(arena);
}
template<> PROTOBUF_NOINLINE ::sla::tpu_status_res* Arena::CreateMaybeMessage< ::sla::tpu_status_res >(Arena* arena) {
  return Arena::CreateInternal< ::sla::tpu_status_res >(arena);
}
template<> PROTOBUF_NOINLINE ::sla::tpu_env_req* Arena::CreateMaybeMessage< ::sla::tpu_env_req >(Arena* arena) {
  return Arena::CreateInternal< ::sla::tpu_env_req >(arena);
}
template<> PROTOBUF_NOINLINE ::sla::depth_env_res* Arena::CreateMaybeMessage< ::sla::depth_env_res >(Arena* arena) {
  return Arena::CreateInternal< ::sla::depth_env_res >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
